@model TimeAide.Web.Models.Employment
@Html.HiddenFor(model => model.UserInformationId)
<input id="Employment_Id" name="EmploymentId" type="hidden" value="@Model.Id">
<div class="form-horizontal" style="padding:10px">
    @Html.Partial("_CreatePageTitleView")
    <div class="form-group row">
        <label class="col-md-2 col-form-label" style="margin-left:10px">
            Date
        </label>
        <div class="col-lg text-muted mt-2" style="width:100% !important">
            @Html.EditorFor(model => model.TerminationDate, new { htmlAttributes = new { @class = "form-control", @id = "txtTerminationDate" } })
            @Html.ValidationMessageFor(model => model.TerminationDate, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group row">
        <label class="col-md-2 col-form-label" style="margin-left:10px">
            Type
        </label>
        <div class="col-lg text-muted mt-2">
            @(Html.CustomDropDownList<TimeAide.Web.Models.TerminationType>("ddlTerminationTypeId", null, Model.TerminationTypeId, htmlAttributes: new { @class = "form-control" }))
            @Html.ValidationMessageFor(model => model.TerminationTypeId, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group row">
        <label class="col-md-2 col-form-label" style="margin-left:10px">
            Reason
        </label>
        <div class="col-lg text-muted mt-2">
            @(Html.CustomDropDownList<TimeAide.Web.Models.TerminationReason>("ddlTerminationReasonId", null, Model.TerminationReasonId, htmlAttributes: new { @class = "form-control" }))
            @Html.ValidationMessageFor(model => model.TerminationReasonId, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group row">
        <label class="col-md-2 col-form-label" style="margin-left:10px">
            Eligibility
        </label>
        <div class="col-lg text-muted mt-2">
            @(Html.CustomDropDownList<TimeAide.Web.Models.TerminationEligibility>("ddlTerminationEligibilityId", null, Model.TerminationEligibilityId, htmlAttributes: new { @class = "form-control" }))
            @Html.ValidationMessageFor(model => model.TerminationEligibilityId, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group row">
        <label class="col-md-2 col-form-label" style="margin-left:10px">
            Notes
        </label>
        <div class="col-lg text-muted mt-2">
            @Html.EditorFor(model => model.TerminationNotes, new { htmlAttributes = new { @class = "form-control", @id = "txtTerminationNotes" } })
            @Html.ValidationMessageFor(model => model.TerminationNotes, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="submit-section">
        @if (!Model.HasOpenEmployment)
        {
            <button type="button" class="btn btn-primary submit-btn" id="btnAddEmploymentInformation">Save</button>
        }
        <button type="submit" class="btn btn-primary submit-btn" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Cancel</button>
    </div>

</div>

<script type="text/javascript">
    $(document).ready(function () {
        $('input[id*=Date]').each(function () {
            $(this).datetimepicker({ format: 'MM/DD/YYYY' });
        });
        if (@Model.HasOpenEmployment.ToString().ToLower() && @Model.HasOpenPayInformation.ToString().ToLower()) {
            debugger
            toastr.error('Current record cann\'t be closed because it has open employment and pay information.Please close employment and pay information first.', "Alert", { closeButton: true,positionClass: "toast-top-center", timeOut:0, extendedTImeout: 0 });
        }
        if (@Model.HasOpenEmployment.ToString().ToLower()) {
            debugger
            toastr.error('Current record cann\'t be closed because it has open employment.Please close employment first.', "Alert", { closeButton: true,positionClass: "toast-top-center", timeOut:0, extendedTImeout: 0 });
        }
        if (@Model.HasOpenPayInformation.ToString().ToLower()) {
            debugger
            toastr.error('Current record cann\'t be closed because it has open pay information.Please close pay information first.', "Alert", { closeButton: true,positionClass: "toast-top-center", timeOut:0, extendedTImeout: 0 });
        }
        if (@Model.EmploymentHistory.Count == 0) {
            debugger
            toastr.warning('You may close current record although hiring doesn\'t have any employment.', "warning", { closeButton: true,positionClass: "toast-top-center", showDuration: 1000,
                                                                                                                                                                           hideDuration: 1000,
                                                                                                                                                                           timeOut: 5000,
                extendedTimeOut: 1000
            });

        }
   });
</script>
@Scripts.Render("~/bundles/jqueryval")
