@model TimeAide.Web.Models.JobCertificationSignee
<div class="container" role="main">
    <form action="UploadDocument" method="post" enctype="multipart/form-data" class="needs-validation box" novalidate>
        <div class="form-horizontal" style="padding:10px">
            @Html.Partial("_CreatePageTitleView")
            @Html.HiddenFor(m => m.Id)
            <div class="form-group row">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group row">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.Position, "Position", htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Position, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Position, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-3">
                    @Html.LabelFor(model => model.Signature, "Signature", htmlAttributes: new { @class = "control-label" })
                </label>
                <div class="col-md-8">
                    @if (Model.Signature != null && Model.Signature.Length > 0)
                    {
                        var base64 = Convert.ToBase64String(Model.Signature);
                        var imgsrc = string.Format("data:image/jpg;base64,{0}", base64);
                        <div id="divShowLogoImage">
                            <img src='@imgsrc' style="max-width:100px;max-height:150px" id="imgSignature" />
                            <br />
                            <button type="button" id="btnChangeLogo" class="btn btn-link">Change Signature</button>
                        </div>
                        <div id="divUploadLogoImage" style="display:none">
                            @*<input class="form-control" type="file" id="uploadSignature" accept=".jpg,.png">*@
                            <div class="box__input" style="margin-top: 20px;">
                                @*<svg class="box__icon" xmlns="http://www.w3.org/2000/svg" width="50" height="43" viewBox="0 0 50 43"><path d="M48.4 26.5c-.9 0-1.7.7-1.7 1.7v11.6h-43.3v-11.6c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v13.2c0 .9.7 1.7 1.7 1.7h46.7c.9 0 1.7-.7 1.7-1.7v-13.2c0-1-.7-1.7-1.7-1.7zm-24.5 6.1c.3.3.8.5 1.2.5.4 0 .9-.2 1.2-.5l10-11.6c.7-.7.7-1.7 0-2.4s-1.7-.7-2.4 0l-7.1 8.3v-25.3c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v25.3l-7.1-8.3c-.7-.7-1.7-.7-2.4 0s-.7 1.7 0 2.4l10 11.6z" /></svg>*@
                                <input type="file" name="files[]" id="uploadSignature" class="box__file" data-multiple-caption="{count} files selected" multiple accept=".jpg" />
                                <label for="uploadSignature" id="lbldocumentfile"><strong>Choose a file</strong><span class="box__dragndrop"> or drag it here</span>.</label>
                                <a class="btn" id="btnClearFileSelection" href="#" style="margin-bottom: 2rem;display: none;" onclick="clearFileSelection()"><i class="fa fa-minus-square"></i></a>
                            </div>
                            <button type="button" id="btnCancelChangeLogo" class="btn btn-link">Cancel</button>
                        </div>
                    }
                    else
                    {
                        @*<input class="form-control" type="file" id="uploadSignature" accept=".jpg,.png">*@
                        <div class="box__input" style="margin-top: 20px;">
                            @*<svg class="box__icon" xmlns="http://www.w3.org/2000/svg" width="50" height="43" viewBox="0 0 50 43"><path d="M48.4 26.5c-.9 0-1.7.7-1.7 1.7v11.6h-43.3v-11.6c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v13.2c0 .9.7 1.7 1.7 1.7h46.7c.9 0 1.7-.7 1.7-1.7v-13.2c0-1-.7-1.7-1.7-1.7zm-24.5 6.1c.3.3.8.5 1.2.5.4 0 .9-.2 1.2-.5l10-11.6c.7-.7.7-1.7 0-2.4s-1.7-.7-2.4 0l-7.1 8.3v-25.3c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v25.3l-7.1-8.3c-.7-.7-1.7-.7-2.4 0s-.7 1.7 0 2.4l10 11.6z" /></svg>*@
                            <input type="file" name="files[]" id="uploadSignature" class="box__file" data-multiple-caption="{count} files selected" multiple accept=".jpg" />
                            <label for="uploadSignature" id="lbldocumentfile"><strong>Choose a file</strong><span class="box__dragndrop"> or drag it here</span>.</label>
                            <a class="btn" id="btnClearFileSelection" href="#" style="margin-bottom: 2rem;display: none;" onclick="clearFileSelection()"><i class="fa fa-minus-square"></i></a>
                        </div>
                    }

                </div>
            </div>
            <div class="form-group row">
                <label class="col-md-3 col-form-label">All Companies: <span class="text-danger"></span></label>

                <div class="col-md-8 pt-2">
                    @if (ViewBag.CanBeAssignedToCurrentCompany && ViewBag.IsAllCompanies)
                    {
                        <input type="checkbox" id="IsAllCompaniesAE" checked="checked" />
                    }
                    else if (!ViewBag.CanBeAssignedToCurrentCompany && ViewBag.IsAllCompanies)
                    {
                        <input type="checkbox" id="IsAllCompaniesAE" checked="checked" disabled="disabled" />
                    }
                    else if (!ViewBag.IsAllCompanies)
                    {
                        <input type="checkbox" id="IsAllCompaniesAE" value="@ViewBag.IsAllCompanies" />
                    }
                </div>
            </div>


            <div class="submit-section">
                <input type="hidden" id="popupTargetDdl" />
                <button type="submit" class="btn btn-primary submit-btn">Save</button>
                @*<button type="button" onclick="fnSaveJobCertificationSignee('Edit');" class="btn btn-primary submit-btn">Save</button>*@
                <button type="button" class="btn btn-primary submit-btn" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Cancel</button>
            </div>
        </div>
       </form>
    </div>

        @Scripts.Render("~/bundles/jqueryval")

        <script>
            $(document).ready(function () {
                $("#btnCancelChangeLogo").click(function () {
                    debugger
                    $("#divShowLogoImage").show();
                    $("#divUploadLogoImage").hide();

                });

                $("#btnChangeLogo").click(function () {
                    debugger
                    $("#divShowLogoImage").hide();
                    $("#divUploadLogoImage").show();
                });
            });

        </script>

        <link href="~/Content/drag-and-drop.css" rel="stylesheet" />
        <script>(function (e, t, n) { var r = e.querySelectorAll("html")[0]; r.className = r.className.replace(/(^|\s)no-js(\s|$)/, "$1js$2") })(document, window, 0);</script>
        <script>

            'use strict';
            (function () {
                'use strict';
                window.addEventListener('load', function () {
                    // Fetch all the forms we want to apply custom Bootstrap validation styles to
                    var forms = document.getElementsByClassName('needs-validation');
                    // Loop over them and prevent submission
                    var validation = Array.prototype.filter.call(forms, function (form) {
                        form.addEventListener('submit', function (event) {
                            if (form.checkValidity() === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                            form.classList.add('was-validated');
                        }, false);
                    });
                }, false);
            })();
            ; (function (document, window, index) {
                // feature detection for drag&drop upload
                var isAdvancedUpload = function () {
                    var div = document.createElement('div');
                    return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && 'FormData' in window && 'FileReader' in window;
                }();


                // applying the effect for every form
                var forms = document.querySelectorAll('.box');

                Array.prototype.forEach.call(forms, function (form) {
                    var input = form.querySelector('input[type="file"]'),
                        label = form.querySelector('#lbldocumentfile'),
                        errorMsg = form.querySelector('.box__error span'),
                        restart = form.querySelectorAll('.box__restart'),
                        droppedFiles = false,
                        showFiles = function (files) {
                            const allowedTypes = ['image/png', 'image/jpeg'];
                            let isValidType = true;
                            Array.prototype.forEach.call(droppedFiles, function (eachFile) {
                                var mimeType = eachFile.type;
                                if (jQuery.inArray(mimeType, allowedTypes) == -1) {
                                    toastr.error("Invalid file type: " + mimeType + ", Please select another file.", "Error!");
                                    isValidType = false;
                                }
                            });
                            if (isValidType) {
                                showSelectedImage1(files);
                                label.textContent = files.length > 1 ? (input.getAttribute('data-multiple-caption') || '').replace('{count}', files.length) : files[0].name;
                                $('#btnClearFileSelection').show();
                            }
                            /*$('#btnUploadDocument').prop('disabled', false);*/
                        },
                        triggerFormSubmit = function () {
                            debugger
                            alert('hi1');
                            return false;
                            //var event = document.createEvent('HTMLEvents');
                            //event.initEvent('submit', true, false);
                            //form.dispatchEvent(event);
                            //uploadProfilePicture1("U");

                        };

                    // letting the server side to know we are going to make an Ajax request
                    var ajaxFlag = document.createElement('input');
                    ajaxFlag.setAttribute('type', 'hidden');
                    ajaxFlag.setAttribute('name', 'ajax');
                    ajaxFlag.setAttribute('value', 1);
                    form.appendChild(ajaxFlag);

                    // automatically submit the form on file select
                    input.addEventListener('change', function (e) {
                        showFiles(e.target.files);
                        showSelectedImage(e.target);

                    });

                    // drag&drop files if the feature is available
                    if (isAdvancedUpload) {
                        form.classList.add('has-advanced-upload'); // letting the CSS part to know drag&drop is supported by the browser

                        ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'].forEach(function (event) {
                            form.addEventListener(event, function (e) {
                                // preventing the unwanted behaviours
                                e.preventDefault();
                                e.stopPropagation();
                            });
                        });
                        ['dragover', 'dragenter'].forEach(function (event) {
                            form.addEventListener(event, function () {
                                form.classList.add('is-dragover');
                            });
                        });
                        ['dragleave', 'dragend', 'drop'].forEach(function (event) {
                            form.addEventListener(event, function () {
                                form.classList.remove('is-dragover');
                            });
                        });
                        form.addEventListener('drop', function (e) {
                            droppedFiles = e.dataTransfer.files; // the files that were dropped
                            showFiles(droppedFiles);

                        });
                    }


                    // if the form was submitted
                    form.addEventListener('submit', function (e) {
                        // preventing the duplicate submissions if the current one is in progress
                        debugger
                        if (form.checkValidity() === false) {
                            e.preventDefault();
                            e.stopPropagation();
                            alert('hi11121');
                            e.preventDefault();
                            return false;
                        }

                        if (form.classList.contains('is-uploading')) return false;

                        form.classList.add('is-uploading');
                        form.classList.remove('is-error');

                        if (isAdvancedUpload) // ajax file upload for modern browsers
                        {
                            e.preventDefault();

                            // gathering the form data
                            var ajaxData = new FormData(form);
                            if (droppedFiles) {
                                Array.prototype.forEach.call(droppedFiles, function (file) {
                                    ajaxData.append(input.getAttribute('name'), file);
                                });
                            }

                            
                            uploadDroppedFiles(droppedFiles);
                            // ajax request
                            //var ajax = new XMLHttpRequest();
                            //ajax.open(form.getAttribute('method'), form.getAttribute('action'), true);

                            //ajax.onload = function () {
                            //    form.classList.remove('is-uploading');
                            //    if (ajax.status >= 200 && ajax.status < 400) {
                            //        var data = JSON.parse(ajax.responseText);
                            //        form.classList.add(data.success == true ? 'is-success' : 'is-error');
                            //        if (!data.success) errorMsg.textContent = data.error;
                            //    }
                            //    else alert('Error. Please, contact the webmaster!');
                            //};

                            //ajax.onerror = function () {
                            //    form.classList.remove('is-uploading');
                            //    alert('Error. Please, try again!');
                            //};

                            //ajax.send(ajaxData);
                        }
                        else // fallback Ajax solution upload for older browsers
                        {
                            var iframeName = 'uploadiframe' + new Date().getTime(),
                                iframe = document.createElement('iframe');

                            $iframe = $('<iframe name="' + iframeName + '" style="display: none;"></iframe>');

                            iframe.setAttribute('name', iframeName);
                            iframe.style.display = 'none';

                            document.body.appendChild(iframe);
                            form.setAttribute('target', iframeName);

                            iframe.addEventListener('load', function () {
                                var data = JSON.parse(iframe.contentDocument.body.innerHTML);
                                form.classList.remove('is-uploading')
                                form.classList.add(data.success == true ? 'is-success' : 'is-error')
                                form.removeAttribute('target');
                                if (!data.success) errorMsg.textContent = data.error;
                                iframe.parentNode.removeChild(iframe);
                            });
                        }
                    });


                    // restart the form if has a state of error/success
                    Array.prototype.forEach.call(restart, function (entry) {
                        entry.addEventListener('click', function (e) {
                            e.preventDefault();
                            form.classList.remove('is-error', 'is-success');
                            input.click();
                        });
                    });

                    // Firefox focus bug fix for file input
                    input.addEventListener('focus', function () { input.classList.add('has-focus'); });
                    input.addEventListener('blur', function () { input.classList.remove('has-focus'); });

                });
            }(document, window, 0));

            function clearFileSelection() {
                debugger
                $('#lbldocumentfile').html('<strong>Choose a file</strong><span class="box__dragndrop"> or drag it here</span>.');
                document.getElementById("userPictureUpload").value = null;
                /*$('#btnUploadCredential').prop('disabled', true);*/
                $('#btnClearFileSelection').hide();
                /*$("#lbldocumentfile").text('');*/
                showSelectedImage1(null);
                $('.box__input').css('visibility', 'visible');
            }

            function showSelectedImage1(files) {
                debugger;
                if (files && files[0]) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        $('#userProfileImageEdit').attr('src', e.target.result);
                    }

                    reader.readAsDataURL(files[0]);
                }
                else {
                    $('#userProfileImageEdit').attr('src', '');
                }
            }
            $("#btnUploadPic1").click(function () {
                //uploadProfilePicture1("U")
                //btnDeletePicture
            });
            
            function uploadDroppedFiles(droppedFiles) {
                fnSaveJobCertificationSignee('Edit', droppedFiles);
            }
        </script>
