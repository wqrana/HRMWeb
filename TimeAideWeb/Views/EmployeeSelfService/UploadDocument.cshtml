@model TimeAide.Web.Models.SelfServiceEmployeeDocument
@{
    ViewBag.Title = "Create";
    Layout = null;
}

<div>
    <input type="hidden" id="hdnEmployeeDocumentId" value="@Model.EmployeeDocumentId" />
    <div class="container" role="main">
        <form action="UploadDocument" method="post" enctype="multipart/form-data" class="needs-validation box" novalidate>

            @foreach (TimeAide.Web.Models.Document document in ViewBag.DocumentList)
            {
                if ((document.IsExpirable))
                {
                    <input type="hidden" id="hdnDocumentId_@document.Id" name="custId" value="true">
                }
                else
                {
                    <input type="hidden" id="hdnDocumentId_@document.Id" name="custId" value="false">
                }
            }
            @if (Model.EmployeeDocumentId > 0)
            {
                <div class="form-group col-md-12">
                    <div class="form-group row">
                        @Html.LabelFor(model => model.DocumentId, "Document", htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Document.DocumentName, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                        <input type="hidden" id="hdnDocumentId" name="custId" value="@Model.DocumentId" />
                        @Html.ValidationMessageFor(model => model.DocumentId, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            else
            {
                <div class="form-group col-md-12">
                    <div class="form-group row">
                        <label class="control-label">Document <span class="text-danger">*</span></label>
                        @*@Html.LabelFor(model => model.DocumentId, "Document", htmlAttributes: new { @class = "control-label" })*@
                        @(Html.CustomDropDownList<TimeAide.Web.Models.Document>("DocumentId", null, Model.DocumentId, false, null, htmlAttributes: new { @class = "form-control", onchange = "EmployeeDocumentChange()" }))
                        @Html.ValidationMessageFor(model => model.DocumentId, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            <div class="form-group col-md-12">
                <div class="form-group row">
                    @Html.LabelFor(model => model.DocumentNote, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.DocumentNote, new { htmlAttributes = new { @class = "form-control" } })

                    @Html.ValidationMessageFor(model => model.DocumentNote, "", new { @class = "text-danger" })
                </div>
            </div>
            @if (Model.EmployeeDocumentId > 0)
            {
                <div class="form-group col-md-12" id="divPreviousExpirationDate" style="display:none">
                    <div class="form-group row">
                        @Html.LabelFor(model => model.EmployeeDocument.ExpirationDate, "Previous Expiration Date:", htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.EmployeeDocument.ExpirationDate, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.ExpirationDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
            <div class="col-md-12" id="divExpirationDate" style="display:none">
                <div class="form-group row">
                    @Html.LabelFor(model => model.ExpirationDate, "Expiration Date:", htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.ExpirationDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ExpirationDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="box__input" style="margin-top:20px">
                @*<svg class="box__icon" xmlns="http://www.w3.org/2000/svg" width="50" height="43" viewBox="0 0 50 43"><path d="M48.4 26.5c-.9 0-1.7.7-1.7 1.7v11.6h-43.3v-11.6c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v13.2c0 .9.7 1.7 1.7 1.7h46.7c.9 0 1.7-.7 1.7-1.7v-13.2c0-1-.7-1.7-1.7-1.7zm-24.5 6.1c.3.3.8.5 1.2.5.4 0 .9-.2 1.2-.5l10-11.6c.7-.7.7-1.7 0-2.4s-1.7-.7-2.4 0l-7.1 8.3v-25.3c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v25.3l-7.1-8.3c-.7-.7-1.7-.7-2.4 0s-.7 1.7 0 2.4l10 11.6z" /></svg>*@
                <input type="file" name="files[]" id="file" class="box__file" data-multiple-caption="{count} files selected" multiple />
                <label for="file" id="lbldocumentfile"><strong>Choose a file</strong><span class="box__dragndrop"> or drag it here</span>.</label>
                <a class="btn" id="btnClearFileSelection" href="#" style="margin-bottom: 2rem;display: none;" onclick="clearFileSelection()"><i class="fa fa-minus-square"></i></a>
            </div>
            <div class="row">
                <div class="col-1">
                </div>
                <div class="col-10">
                    <button type="submit" id="btnUploadDocument" class="box__button" disabled="disabled">Upload</button>
                    <button type="button" class="box__button" data-dismiss="modal"><span class="glyphicon glyphicon-remove"></span> Cancel</button>
                </div>
                <div class="col-1">
                </div>
            </div>
            <div class="row">
                <div class="box__uploading"><img src="~/Images/spinning-loading.gif" /></div>
                <div class="box__success">Done! <a href="https://css-tricks.com/examples/DragAndDropFileUploading//?" class="box__restart" role="button">Upload more?</a></div>
                <div class="box__error">Error! <span></span>. <a href="https://css-tricks.com/examples/DragAndDropFileUploading//?" class="box__restart" role="button">Try again!</a></div>
            </div>
        </form>
    </div>
</div>
@Scripts.Render("~/bundles/jqueryval")
<link href="~/Content/drag-and-drop.css" rel="stylesheet" />
<script>(function (e, t, n) { var r = e.querySelectorAll("html")[0]; r.className = r.className.replace(/(^|\s)no-js(\s|$)/, "$1js$2") })(document, window, 0);</script>
<script>

    'use strict';
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();
    ; (function (document, window, index) {
        // feature detection for drag&drop upload
        var isAdvancedUpload = function () {
            var div = document.createElement('div');
            return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && 'FormData' in window && 'FileReader' in window;
        }();


        // applying the effect for every form
        var forms = document.querySelectorAll('.box');

        Array.prototype.forEach.call(forms, function (form) {
            var input = form.querySelector('input[type="file"]'),
                label = form.querySelector('#lbldocumentfile'),
                errorMsg = form.querySelector('.box__error span'),
                restart = form.querySelectorAll('.box__restart'),
                droppedFiles = false,
                showFiles = function (files) {
                    const allowedTypes = ['application/pdf', 'application/msword', 'image/png', 'image/jpeg', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];
                    let isValidType = true;
                    Array.prototype.forEach.call(droppedFiles, function (eachFile) {
                        var mimeType = eachFile.type;
                        if (jQuery.inArray(mimeType, allowedTypes) == -1) {
                            toastr.error("Invalid file type: " + mimeType + ", Please select another file.", "Error!");
                            isValidType = false;
                        }
                    });
                    if (isValidType) {
                        label.textContent = files.length > 1 ? (input.getAttribute('data-multiple-caption') || '').replace('{count}', files.length) : files[0].name;
                        $('#btnClearFileSelection').show();
                        $('#btnUploadDocument').prop('disabled', false);
                    }
                },
                triggerFormSubmit = function () {
                    debugger
                    alert('hi1');
                    return false;
                    //var event = document.createEvent('HTMLEvents');
                    //event.initEvent('submit', true, false);
                    //form.dispatchEvent(event);
                    uploadDroppedFiles();

                };

            // letting the server side to know we are going to make an Ajax request
            var ajaxFlag = document.createElement('input');
            ajaxFlag.setAttribute('type', 'hidden');
            ajaxFlag.setAttribute('name', 'ajax');
            ajaxFlag.setAttribute('value', 1);
            form.appendChild(ajaxFlag);

            // automatically submit the form on file select
            input.addEventListener('change', function (e) {
                showFiles(e.target.files);


            });

            // drag&drop files if the feature is available
            if (isAdvancedUpload) {
                form.classList.add('has-advanced-upload'); // letting the CSS part to know drag&drop is supported by the browser

                ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'].forEach(function (event) {
                    form.addEventListener(event, function (e) {
                        // preventing the unwanted behaviours
                        e.preventDefault();
                        e.stopPropagation();
                    });
                });
                ['dragover', 'dragenter'].forEach(function (event) {
                    form.addEventListener(event, function () {
                        form.classList.add('is-dragover');
                    });
                });
                ['dragleave', 'dragend', 'drop'].forEach(function (event) {
                    form.addEventListener(event, function () {
                        form.classList.remove('is-dragover');
                    });
                });
                form.addEventListener('drop', function (e) {
                    droppedFiles = e.dataTransfer.files; // the files that were dropped
                    showFiles(droppedFiles);

                });
            }


            // if the form was submitted
            form.addEventListener('submit', function (e) {
                // preventing the duplicate submissions if the current one is in progress
                debugger
                if (form.checkValidity() === false) {
                    e.preventDefault();
                    e.stopPropagation();
                    alert('hi11121');
                    e.preventDefault();
                    return false;
                }

                if (form.classList.contains('is-uploading')) return false;

               
                $(".loading").show();
                form.classList.remove('is-error');

                if (isAdvancedUpload) // ajax file upload for modern browsers
                {
                    e.preventDefault();

                    // gathering the form data
                    var ajaxData = new FormData(form);
                    if (droppedFiles) {
                        Array.prototype.forEach.call(droppedFiles, function (file) {
                            ajaxData.append(input.getAttribute('name'), file);
                        });
                    }

                    uploadDroppedFiles(droppedFiles);
                    // ajax request
                    //var ajax = new XMLHttpRequest();
                    //ajax.open(form.getAttribute('method'), form.getAttribute('action'), true);

                    //ajax.onload = function () {
                    //    form.classList.remove('is-uploading');
                    //    if (ajax.status >= 200 && ajax.status < 400) {
                    //        var data = JSON.parse(ajax.responseText);
                    //        form.classList.add(data.success == true ? 'is-success' : 'is-error');
                    //        if (!data.success) errorMsg.textContent = data.error;
                    //    }
                    //    else alert('Error. Please, contact the webmaster!');
                    //};

                    //ajax.onerror = function () {
                    //    form.classList.remove('is-uploading');
                    //    alert('Error. Please, try again!');
                    //};

                    //ajax.send(ajaxData);
                }
                else // fallback Ajax solution upload for older browsers
                {
                    var iframeName = 'uploadiframe' + new Date().getTime(),
                        iframe = document.createElement('iframe');

                    $iframe = $('<iframe name="' + iframeName + '" style="display: none;"></iframe>');

                    iframe.setAttribute('name', iframeName);
                    iframe.style.display = 'none';

                    document.body.appendChild(iframe);
                    form.setAttribute('target', iframeName);

                    iframe.addEventListener('load', function () {
                        var data = JSON.parse(iframe.contentDocument.body.innerHTML);
                        form.classList.remove('is-uploading')
                        $(".loading").hide();
                        form.classList.add(data.success == true ? 'is-success' : 'is-error')
                        form.removeAttribute('target');
                        if (!data.success) errorMsg.textContent = data.error;
                        iframe.parentNode.removeChild(iframe);
                    });
                }
            });


            // restart the form if has a state of error/success
            Array.prototype.forEach.call(restart, function (entry) {
                entry.addEventListener('click', function (e) {
                    e.preventDefault();
                    form.classList.remove('is-error', 'is-success');
                    input.click();
                });
            });

            // Firefox focus bug fix for file input
            input.addEventListener('focus', function () { input.classList.add('has-focus'); });
            input.addEventListener('blur', function () { input.classList.remove('has-focus'); });

        });
    }(document, window, 0));

    $(document).ready(function () {
        $('input[id*=Date]').each(function () {
            $(this).datetimepicker({ format: 'MM/DD/YYYY' });
        });
        debugger
        EmployeeDocumentChange();
    });
    function uploadDroppedFiles(droppedFiles) {
        uploadEmployeeDoc(droppedFiles);
    }
    function uploadEmployeeDoc(droppedFiles) {
        //function uploadEmployeeDoc() {
        debugger
        var id = $('#hdnEmployeeDocumentId').val();
        var formData = new FormData();
        formData.append("employeeDocumentId", id);
        var totalFiles = document.getElementById("file").files.length;
        if (totalFiles > 0) {
            var file = document.getElementById("file").files[0];
            formData.append("EduDocFile", file);
        }
        else if (droppedFiles) {
            Array.prototype.forEach.call(droppedFiles, function (eachFile) {
                formData.append("EduDocFile", eachFile);
            });
        }

        formData.append("DocumentName", $('#DocumentName').val());
        formData.append("DocumentNote", $('#DocumentNote').val());
        formData.append("ExpirationDate", $('#ExpirationDate').val());
        if (id > 0)
            formData.append("DocumentId", $('#hdnDocumentId').val());
        else
            formData.append("DocumentId", $('#DocumentId  :selected').val());
        //debugger;
        var id = formData.get("DocumentId");
        if (id.length == 0) {
            $(".loading").hide();
            showAlertAutoHide("","Error", "Missing required field(s).");
            return;
        }    
        //Ajax call for uploading & deletion
        $.ajax({
            type: "POST",
            url: '/EmployeeSelfService/UploadDocument',
            data: formData,
            dataType: 'json',
            contentType: false,
            processData: false,
            success: function (data) {
                debugger;
                if (data.message == "success") {
                    $('#drag_Documentfiles').modal('hide');
                   
                    /*showAlertAutoHide("#userDetailAlert", data.status, data.message);*/
                    /*var userInformationId = $('#UserInformationId').val();*/
                    /*fnRefreshEmployeeDocuments(userInformationId)*/
                    //retreiveEmployeeEducationTab();
                    toastr.success('Change request submitted successfully.', "Success!");
                    $(".loading").hide();
                }
                else {
                    //window.location.replace(window.location.pathname + window.location.search + window.location.hash);
                    /*showAlertAutoHide(alertID, data.status, data.message);*/
                    $('#drag_Documentfiles').modal('hide');
                    toastr.error("There was an error in uploading document", "Error!");
                    $(".loading").hide();

                }
            },
            error: function (error) {

                showAlertAutoHide(alertID, "Error", error);
                $(".loading").hide();
            }
        });
    }
</script>

<script type="text/javascript">


</script>
<script type="text/javascript">
    function EmployeeDocumentChange() {
        debugger

        var id = $('#hdnEmployeeDocumentId').val();
        var selectedId = '';
        if (id > 0)
            selectedId = $('#hdnDocumentId').val();
        else
            selectedId = $('#DocumentId  :selected').val();

        if ($('#hdnDocumentId_' + selectedId).val() == 'true') {
            $('#divExpirationDate').show();
            $('#divPreviousExpirationDate').show();
            
        }
        else {
            $('#divExpirationDate').hide();
            $('#divPreviousExpirationDate').hide();
        }
    }
    function clearFileSelection() {
        debugger
        $('#lbldocumentfile').html('<strong>Choose a file</strong><span class="box__dragndrop"> or drag it here</span>.');
        document.getElementById("file").value = null;
        $('#btnUploadDocument').prop('disabled', true);
        $('#btnClearFileSelection').hide()
    }
</script>